import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Seus dados organizados em arrays NumPy
X = np.array([
        #Horasdesono  Batimentos   Temperatura   Oxigenio
    [1,    6.36,          64,          17,          92],  #1
    [1,    6.43,          63,          17,          95],  #2
    [1,    7.27,          64,          18,          94],  #3
    [1,    9.36,          61,          16,          96],  #4
    [1,    6.64,          62,          13,          95],  #5
    [1,    5.75,          61,          12,          95],  #6
    [1,    7.17,          66,          15,          94],  #7
    [1,    7.12,          65,          15,          95],  #8
    [1,    6.24,          59,          17,          96],  #9
    [1,    6.59,          66,          20,          94],  #10
    [1,    8.64,          64,          20,          93],  #11
    [1,    6.59,          62,          20,          93],  #12
    [1,    7.10,          61,          21,          92],  #13
    [1,    5.31,          65,          21,          94],  #14
    [1,    7.46,          64,          19,          95],  #15
    [1,    7.16,          71,          21,          92],  #16
    [1,    7.22,          67,          22,          95],  #17
    [1,    9.22,          64,          22,          95],  #18
    [1,    8.17,          68,          19,          95],  #19
    [1,    9.36,          60,          19,          96],  #20
    [1,    6.32,          60,          19,          97],  #21
    [1,    7.7,           65,          20,          96],  #22
    [1,    6.43,          64,          20,          96],  #23
    [1,    7.43,          64,          20,          96],  #24
    [1,    8.53,          64,          20,          96],  #25
    [1,    7.44,          65,          16,          96],  #26
    [1,    6.58,          58,          18,          97],  #27
    [1,    7.00,          58,          21,          97],  #28
    [1,    6.06,          78,          20,          97],  #29
    [1,    6.34,          69,          22,          93],  #30
])

Y = np.array([
  #Fase Rem
    [1.03],  #1
    [1.10],  #2
    [1.20],  #3
    [1.41],  #4
    [1.15],  #5
    [1.20],  #6
    [1.04],  #7
    [1.06],  #8
    [1.54],  #9
    [1.58],  #10
    [1.13],  #11
    [1.00],  #12
    [1.05],  #13
    [1.32],  #14
    [1.26],  #15
    [1.20],  #16
    [1.25],  #17
    [1.29],  #18
    [1.43],  #19
    [1.40],  #20
    [1.43],  #21
    [1.00],  #22
    [1.27],  #23
    [1.10],  #24
    [1.03],  #25
    [1.40],  #26
    [1.06],  #27
    [1.06],  #28
    [0.48],  #29
    [0.58],  #30
])
# Nomes das variáveis
feature_names = ['Horas de Sono', 'Batimentos', 'Temperatura', 'Oxigênio']

# Calcular a matriz de correlação
correlation_matrix = np.corrcoef(X, rowvar=False)

# Dividir os dados em conjuntos de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Inicializar o modelo de regressão linear
model = LinearRegression()


# Treinar o modelo
model.fit(X_train, y_train)

# Fazer previsões nos dados de teste
y_pred = model.predict(X_test)

# Criar o heatmap com nomes de variáveis nos eixos
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5,
            xticklabels=feature_names, yticklabels=feature_names)
plt.title('Matriz de Correlação')
plt.show()

# Avaliar o desempenho do modelo
print('Coeficientes:', model.coef_)
print('Intercepto:', model.intercept_)
print('Erro absoluto médio:', metrics.mean_absolute_error(y_test, y_pred))
print('Erro quadrático médio:', metrics.mean_squared_error(y_test, y_pred))
print('Raiz do erro quadrático médio:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))


# Scatter plot com os resultados reais vs preditos
plt.scatter(y_test, y_pred, color='blue', label='Valores Reais vs Preditos')

# Linha de tendência
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red', linewidth=2, label='Linha de Tendência')

plt.xlabel('Fase REM Real')
plt.ylabel('Fase REM Prevista')
plt.title('Desempenho do Modelo de Regressão Linear')
plt.legend()
plt.show()

